AWSTemplateFormatVersion: 2010-09-09
Description: A Java SpringBoot application deployed with Lambda
Parameters:
  ProjectName:
    Type: String
  MavenProjectName:
    Type: String
  GitCommitId:
    Type: String
  ApiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: dev
  ApiGatewayHTTPMethod:
    Type: String
    Default: ANY
  ResourceEndpoint:
    Type: String
    Default: '{proxy+}'

Resources:

  ##########################
  # Lambda
  ##########################

  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Type: AWS::IAM::Role

  LambdaFunction:
    Properties:
      FunctionName: !Ref MavenProjectName
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: bluegreen.StreamLambdaHandler::handleRequest # code dependent
      Runtime: java11
      Timeout: 60
      MemorySize: 4096 # Java...
      Code:
        S3Bucket: !Sub '${MavenProjectName}-output'
        S3Key: !Sub '${MavenProjectName}/app.jar'
    Type: AWS::Lambda::Function

  LambdaFunctionLogGroup:
    Properties:
      LogGroupName: !Sub /aws/lambda/${MavenProjectName}
      RetentionInDays: 90
    Type: AWS::Logs::LogGroup

  LambdaVersion:
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: Function versionning
    Type: AWS::Lambda::Version

  LambdaAlias:
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionVersion: !GetAtt LambdaVersion.Version
      Name: !Sub '${MavenProjectName}-alias'
    Type: AWS::Lambda::Alias

  ##########################
  # Api Gateway
  ##########################

  ApiGateway:
    Properties:
      Name: !Ref MavenProjectName
      Description: !Ref MavenProjectName
    Type: AWS::ApiGateway::RestApi

  ProxyResource:
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      RestApiId: !Ref ApiGateway
      PathPart: !Ref ResourceEndpoint
    Type: AWS::ApiGateway::Resource

  ApiGatewayRootMethod:
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref ApiGatewayHTTPMethod
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaFunction.Arn
    Type: AWS::ApiGateway::Method

  ApiGatewayDeployment:
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref ApiGatewayStageName
    DependsOn:
      - ApiGatewayRootMethod
    Type: AWS::ApiGateway::Deployment

  Permission:
    Properties:
      FunctionName: !GetAtt 'LambdaFunction.Arn'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/${ApiGatewayHTTPMethod}/${ResourceEndpoint}
    Type: AWS::Lambda::Permission

Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageName}/${ResourceEndpoint}

  LambdaArn:
    Value: !GetAtt LambdaFunction.Arn